var ThreeEmitter=function(t,e){"use strict";function r(t){var e=Object.create(null);return t&&Object.keys(t).forEach((function(r){if("default"!==r){var i=Object.getOwnPropertyDescriptor(t,r);Object.defineProperty(e,r,i.get?i:{enumerable:!0,get:function(){return t[r]}})}})),e.default=t,Object.freeze(e)}var i=r(e);class s extends i.Mesh{autoUpdate=!0;maxParticles;knownInstances=new Set;timestamp=0;constructor(t={maxParticles:1e3}){super(),this.geometry=new i.InstancedBufferGeometry,this.material=new i.RawShaderMaterial,this.material.uniforms.time={value:0},this.maxParticles=t.maxParticles,this.geometry.instanceCount=0,t.attributes&&this.setAttributes(t.attributes),t.uniforms&&this.setUniforms(t.uniforms),t.materialParameters&&this.setMaterialParameters(t.materialParameters),t.vert&&this.setVertexShader(t.vert),t.frag&&this.setFragmentShader(t.frag),t.geometry&&this.setAttributesFromGeometry(t.geometry),this.setAutoUpdate(t.autoUpdate??!0)}setAttributes(t){for(const[e,r]of Object.entries(t))this.geometry.setAttribute(e,r);return this}setAttributesFromGeometry(t){for(const[e,r]of Object.entries(t.attributes))this.geometry.setAttribute(e,r);return this.geometry.index=t.index,t.dispose(),this}setMaterialParameters(t){return this.material.setValues(t),this}setFragmentShader(t){return this.material.fragmentShader=t,this}setVertexShader(t){return this.material.vertexShader=t,this}setUniforms(t){for(const[e,r]of Object.entries(t))e in this.material.uniforms?this.material.uniforms[e].value=r.value:this.material.uniforms[e]={value:r.value};return this}setAutoUpdate(t){return this.autoUpdate=t,t&&requestAnimationFrame(this.update.bind(this)),this}instanceAdded(t){this.knownInstances.has(t)||(this.knownInstances.add(t),this.geometry.instanceCount=Math.min(this.maxParticles,this.geometry.instanceCount+t.particleAmount))}instanceRemoved(t){this.knownInstances.has(t)&&(this.geometry.instanceCount=Math.max(0,this.geometry.instanceCount-t.particleAmount),this.removeAndShiftAttributes(t),this.knownInstances.delete(t))}removeAndShiftAttributes(t){for(const[e,r]of Object.entries(t.attributes)){if(!r||!(e in this.geometry.attributes))continue;const i=t.attributeIndices[e]??0,s=i+r.length;this.geometry.attributes[e].array.set(this.geometry.attributes[e].array.subarray(s),i),this.geometry.attributes[e].array.fill(0,i-s),this.geometry.attributes[e].needsUpdate=!0}}fillAttribute(t,e){if(!(t in this.geometry.attributes))return;const r=this.geometry.attributes[t].array;if("function"==typeof e){let t=0,i=0;for(;i<r.length;){const s=e(t++),a=Array.isArray(s)?s:[s];r.set(a,i),i+=a.length}}else if(Array.isArray(e))for(let t=0;t<r.length;t+=e.length)r.set(e,t);else r.fill(e);this.geometry.attributes[t].needsUpdate=!0}update(){const t=Date.now();this.material.uniforms.time.value+=this.timestamp&&(t-this.timestamp)/1e3||0,this.timestamp=t,this.autoUpdate&&requestAnimationFrame(this.update.bind(this))}dispose(){this.material.dispose(),this.geometry.dispose()}get uniforms(){return this.material.uniforms}get attributes(){return this.geometry.attributes}get particleAmount(){return this.geometry.instanceCount}set particleAmount(t){this.geometry.instanceCount=t}}return t.Emitter=s,t.EmitterInstance=class{particleAmount=0;emitter;attributes={};attributeIndices={};constructor(t,e){this.emitter=t,this.particleAmount=e,this.calculateAttributeSubarrays(),this.added()}fillAttribute(t,e){if(!this.attributes[t])return;const r=this.attributes[t];if("function"==typeof e)for(let t=0;t<r.length;t+=1)r.set([e(t)],t);else if(Array.isArray(e))for(let t=0;t<r.length;t+=e.length)r.set(e,t);else r.fill(e)}added(){this.emitter.instanceAdded(this)}dispose(){this.emitter.instanceRemoved(this)}calculateAttributeSubarrays(){for(const[t,e]of Object.entries(this.emitter.geometry.attributes))if(e.count>=this.emitter.maxParticles){const r=Math.max(0,this.emitter.geometry.instanceCount*e.itemSize),i=Math.min(e.array.length,r+this.particleAmount*e.itemSize);this.attributeIndices[t]=r,this.attributes[t]=new Proxy(e.array.subarray(r,i),{get:(e,r)=>("set"!==r&&"fill"!==r&&"copyWithin"!==r||(this.emitter.geometry.attributes[t].needsUpdate=!0),"function"==typeof e[r]?e[r]?.bind(e):e[r]),set:(e,r,i,s)=>"string"!=typeof r||isNaN(Number(r))?Reflect.set(e,r,i,s):(this.emitter.geometry.attributes[t].needsUpdate=!0,e[Number(r)]=i,!0)})}else this.attributes[t]=e.array}},t}({},THREE);
